name: Create Repository

on:
  issue_comment:
    types: [created, edited]

env:
  APPROVAL_TEAM: ${{ vars.BOOTSTRAP_REPO_MANAGERS }}
  APPROVAL_TEAM_FULL_NAME: ${{ github.repository_owner }}/${{ vars.BOOTSTRAP_REPO_MANAGERS }}

jobs:

  # Extract repository settings from issue body
  extract_repository_settings:
    runs-on: ubuntu-latest
    outputs: 
      repository_name: ${{ steps.extract.outputs.repository_name }}
      repository_visibility: ${{ steps.extract.outputs.repository_visibility }}
      token: ${{ steps.app-token.outputs.token }}
      assignees: ${{ steps.get_team_members.outputs.assignees }}

    steps:
      - name: Extract repository settings
        id: extract
        run: |
          echo "${{ github.event.issue.body }}" >> body.txt
          echo "::set-output name=repository_name::$(awk '/### Repository name/{getline; getline; print}' body.txt)"
          echo "::set-output name=repository_visibility::$(awk '/### Repository visibility/{getline; getline; print}' body.txt)"

      - name: Create Installation Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.BOOTSTRAP_APP_ID }}
          private-key: ${{ secrets.BOOTSTRAP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Get Team Members
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const teamMembers = await github.rest.teams.listMembersInOrg({
              org: context.repo.owner,
              team_slug: process.env.APPROVAL_TEAM
            });
            const assignees = teamMembers.data.map(member => member.login);
            core.setOutput('assignees', assignees.join(','))

  # Create repository
  create_repository:

    runs-on: ubuntu-latest
    needs: extract_repository_settings
    
    if: contains(github.event.comment.body, '/approve') && contains(needs.extract_repository_settings.outputs.assignees, github.event.comment.user.login)

    env:
      GITHUB_TOKEN: ${{ needs.extract_repository_settings.outputs.token }}

    outputs:
      status: ${{ steps.create_repository.outputs.status }}
      error: ${{ steps.create_repository.outputs.error }}

    steps:

      - name: Add labels [approved, processing]
        uses: andymckay/labeler@1.0.4
        with:
          add-labels: "approved, processing"
          remove-labels: "rejected, waiting-for-approval, 1-repository-creation-failed, 2-branch-protection-creation-failed, done"

      - name: Checkout repository
        uses: actions/checkout@v4.1.7

      - name: Create repository
        id: create_repository
        uses: ./actions/create-repository
        with: 
          organization_name: ${{ github.repository_owner }}
          repository_name: ${{ needs.extract_repository_settings.outputs.repository_name }}
          repository_visibility: ${{ needs.extract_repository_settings.outputs.repository_visibility }}

      - name: Add comment
        if: contains(steps.create_repository.outputs.status, 'success')
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "Repository [${{ needs.extract_repository_settings.outputs.repository_name }}](${{ steps.create_repository.outputs.repository_url }}) created"
            })

      - name: Add label if success [1-repository-created]
        if: contains(steps.create_repository.outputs.status, 'success')
        uses: andymckay/labeler@1.0.4
        with:
          add-labels: "1-repository-created"

      - name: Add label if error [1-repository-creation-failed]
        if: contains(steps.create_repository.outputs.status, 'error')
        uses: andymckay/labeler@1.0.4
        with:
          add-labels: "1-repository-creation-failed"
          remove-labels: "processing"

  # Set repository policies
  protect_repository:

    # Test if repository creation was successful
    if: contains(github.event.issue.labels.*.name, '1-repository-created') || contains(needs.create_repository.outputs.status, 'success')

    runs-on: ubuntu-latest
    needs: [create_repository, extract_repository_settings]

    env:
      GITHUB_TOKEN: ${{ secrets.BOOTSTRAP_TOKEN }}
      #APP_ID: ${{ secrets.BOOTSTRAP_APP_ID }}
      #PRIVATE_KEY: ${{ secrets.BOOTSTRAP_PRIVATE_KEY }}
      #INSTALLATION_ID: ${{ secrets.BOOTSTRAP_INSTALLATION_ID }}

    outputs:
      status: ${{ steps.protect_repository.outputs.status }}
      error: ${{ steps.protect_repository.outputs.error }}

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4.1.7

      - name: Set repository policies
        id: protect_repository
        uses: ./actions/protect-repository
        with: 
          organization_name: ${{ github.repository_owner }}
          repository_name: ${{ needs.extract_repository_settings.outputs.repository_name }}

      - name: Add label if success [2-branch-protection-created]
        if: contains(steps.protect_repository.outputs.status, 'success')
        uses: andymckay/labeler@1.0.4
        with:
          add-labels: "2-branch-protection-created, done"
          remove-labels: "processing"

      - name: Add label if error [2-branch-protection-creation-failed]
        if: contains(steps.protect_repository.outputs.status, 'error')
        uses: andymckay/labeler@1.0.4
        with:
          add-labels: "2-branch-protection-creation-failed, done"
          remove-labels: "processing"

      - name: Close issue if success
        if: contains(steps.protect_repository.outputs.status, 'success')
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "closed"
            })

  # Reject repository creation
  reject_repository:

    if: contains(github.event.comment.body, '/reject' && contains(needs.extract_repository_settings.outputs.assignees, github.event.comment.user.login)

    runs-on: ubuntu-latest
    needs: extract_repository_settings

    steps:

      - name: Add label [rejected]
        uses: andymckay/labeler@1.0.4
        with:
          add-labels: "rejected"
          remove-labels: "approved, processing, waiting-for-approval, done"